# https://github.com/github/gitignore/blob/main/Python.gitignore
# python -m venv .venv - –°–û–ó–î–ê–ù–ò–ï –°–†–ï–î–´
# .venv\Scripts\activate.ps1 –¥–ª—è PWSH, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ, –±–µ–∑ .ps1
# deactivate - –¥–µ–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É —Å—Ä–µ–¥—É
# pip list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
# pip freeze - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –¥—Ä. –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞
# pip freeze > requirements.txt - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# pip install -r requirements.txt - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
# pip install pillow - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –≤ –º–æ–¥–µ–ª—è—Ö
# pip install django

# –°–û–ó–î–ê–ï–ú –ü–†–û–ï–ö–¢
# django-admin startproject myproject1
# –ø–æ—è–≤–∏–ª–∞—Å—å –ø–∞–ø–∫–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å
# asgi - –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Ö—Ä–æ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
# wsgi - –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—Å–∏—Ö—Ä–æ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
# cd .\myproject1\

# python manage.py runserver
# –∏–ª–∏ –ª—é–±–æ–π –ø–æ—Ä—Ç –∏–ª–∏ ip, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.0.0.0 –¥–ª—è –≤—Å–µ—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
# python manage.py runserver 8080
# python manage.py runserver 0.0.0.0:8080

# ipconfig - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π ip
# –í settings –º–æ–∂–µ–º –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π ip, —á—Ç–æ–± –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ö–æ—Å—Ç—ã —Ç–æ–∂–µ –º–æ–≥–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å
# ALLOWED_HOSTS = [
#     '192.168.0.53',
#     '127.0.0.1',
# ]

# —Ç–∞–∫ –∑–∞–π–¥–µ—Ç –ª—é–±–æ–π ip –∞–¥—Ä–µ—Å
# ALLOWED_HOSTS = ['*/*']

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# python manage.py startapp myapp

# –î–æ–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç
# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'myapp',
# ]

# –≤ myapp –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ views –Ω—É–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
# –ü–æ–ø—Ä–æ—â–µ –±–µ–∑ –ª–æ–≥–µ—Ä–∞
# from django.http import HttpResponse  # –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
#
#
# def index(request):
#     return HttpResponse("Hello, world!")
#
#
# def about(request):
#     return HttpResponse("About us")


# –ü–æ —Å–ª–æ–∂–Ω–µ–µ –∏ —Å –ª–æ–≥–µ—Ä–æ–º
# import logging
# from django.http import HttpResponse  # –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
#
# logger = logging.getLogger(__name__)
#
#
# def index(request):
#     logger.info('Index page accessed')
#     return HttpResponse("Hello, world!")
#
#
# def about(request):
#     try:
#         # some code that might raise an exception
#         result = 1 / 0
#     except Exception as e:
#         logger.exception(f'Error in about page: {e}')
#         return HttpResponse("Oops, something went wrong.")
#     else:
#         logger.debug('About page accessed')
#         return HttpResponse("This is the about page.")


# View c –±–µ–∑ –∫–ª–∞—Å—Å–∞ –∏ —Å –∫–ª–∞—Å—Å–æ–º, —Å –≤—ã–≤–æ–¥–æ–º Json –∏ –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
# from django.http import HttpResponse, JsonResponse
# from django.views import View
#
#
# def hello(request):
#     return HttpResponse("Hello World from function!")
#
#
# class HelloView(View):
#     def get(self, request):
#         return HttpResponse("Hello World from class!")
#
#
# def year_post(request, year):
#     text = ""
#     ...  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –∑–∞ –≥–æ–¥
#     return HttpResponse(f"Posts from {year}<br>{text}")
#
#
# class MonthPost(View):
#     def get(self, request, year, month):
#         text = "hhjknkjng,hghvh"
#         ...  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –∑–∞ –≥–æ–¥ –∏ –º–µ—Å—è—Ü
#         return HttpResponse(f"Posts from {month}/{year}<br>{text}")
#
#
# def post_detail(request, year, month, slug):
#     ...  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –∑–∞ –≥–æ–¥ –∏ –º–µ—Å—è—Ü –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É. –ü–æ–∫–∞ –æ–±–æ–π–¥—ë–º—Å—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     post = {
#         "year": year,
#         "month": month,
#         "slug": slug,
#         "title": "–ö—Ç–æ –±—ã—Å—Ç—Ä–µ–µ —Å–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–∫–∏ –≤ Python, list() –∏–ª–∏ []",
#         "content": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–¥—É–º–∞–ª—Å—è –Ω–∞–¥ —Ç–µ–º, "
#                    "–∫–∞–∫–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ Python —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ..."
#     }
#     return JsonResponse(post, json_dumps_params={'ensure_ascii': False})


# –≤ —Ç–∞–∫–º —Å–ª—É—á–∞–µ urls –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫
# from django.urls import path
# from .views import hello, HelloView
# from .views import year_post, MonthPost, post_detail
#
# urlpatterns = [
#     path('hello/', hello, name='hello'),
#     path('hello2/', HelloView.as_view(), name='hello2'),
# path('posts/<int:year>/', year_post, name='year_post'),
# path('posts/<int:year>/<int:month>/', MonthPost.as_view(), name='month_post'),
# path('posts/<int:year>/<int:month>/<slug:slug>/', post_detail, name='post_detail'),
# ]

# –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
# üí° str ‚Äî –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç—Ä–æ–∫–∏ –ª—é–±—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Å–ª—ç—à–∞.
# üí° int ‚Äî –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.
# üí° slug ‚Äî –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã,
# –¥–µ—Ñ–∏—Å—ã –∏ –∑–Ω–∞–∫–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.
# üí° uuid ‚Äî –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.
# üí° path ‚Äî –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç—Ä–æ–∫–∏ –ª—é–±—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Å–ª—ç—à–∏.




# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π:
# –û—Ç–∫—Ä—ã–≤–∞–µ–º urls.py –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º
# from django.contrib import admin
# from django.urls import path, include
#
# urlpatterns = [
#     path('admin/', admin.site.urls),
#     path('', include('sem1app.urls')),
#     path('', include('sem1app2.urls')),
#     path('', include('lecapp3.urls')),
# ]

# —Å–æ–µ–¥–∏–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
# –≤ myapp —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª urls.py
# from django.urls import path
# from . import views
#
# urlpatterns = [
#     path('', views.index, name='index'),
#     path('about/', views.about, name='about'),
#     path('coin/', views.coin, name='coin'),
#     path('random_roll/', views.random_roll, name='random_roll'),
#     path('random_num/', views.random_num, name='random_num'),
# ]

# –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
# python manage.py runserver
# http://127.0.0.1:8000/
# http://127.0.0.1:8000/about/


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º - settings
# –¥–æ–ø–∏—Å—ã–≤–∞–µ–º LOGGING = {}
# –≤ –ø—Ä–æ–µ–∫—Ç–µ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É log

# LOGGING = {
#     'version': 1,  # –Ω–∞—à–∞ –≤–µ—Ä—Å–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
#     'disable_existing_loggers': False,  # –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#     'formatters': {
#         'simple': {
#             'format': '%(levelname)s %(message)s'
#         },
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {process} {thread} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose'
#         },
#         'file': {
#             'class': 'logging.FileHandler',
#             'filename': './log/django.log',
#             'formatter': 'verbose'
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'file'],
#             'level': 'INFO',
#         },
#         'myapp': {
#             'handlers': ['console', 'file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }

# –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'simple': {
#             'format': '%(levelname)s %(message)s'
#         },
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {process} {thread} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose'
#         },
#         'file1': {
#             'class': 'logging.FileHandler',
#             'filename': './log/django1.log',
#             'formatter': 'verbose'
#         },
#         'file2': {
#             'class': 'logging.FileHandler',
#             'filename': './log/django2.log',
#             'formatter': 'verbose'
#         },
#     },
#     'loggers': {
#         'django1': {
#             'handlers': ['console', 'file1'],
#             'level': 'INFO',
#         },
#         'django2': {
#             'handlers': ['console', 'file2'],
#             'level': 'INFO',
#         },
#         'sem1app': {
#             'handlers': ['console', 'file1'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'sem1app2': {
#             'handlers': ['console', 'file2'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }

#########################################################################
# –°–û–ó–î–ê–ù–ò–ï –ú–û–î–ï–õ–ò
# –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ models.py
# from django.db import models
#
#
# class User(models.Model):  # id –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
#     name = models.CharField(max_length=100)
#     email = models.EmailField()
#     password = models.CharField(max_length=100)
#     age = models.IntegerField()
#
#
# class Product(models.Model):
#     name = models.CharField(max_length=100)
#     price = models.DecimalField(max_digits=8, decimal_places=2)
#     description = models.TextField()
#     image = models.ImageField(upload_to='products/')
#
#
# class Order(models.Model):
#     customer = models.ForeignKey(User, on_delete=models.CASCADE)
#     products = models.ManyToManyField(Product)
#     date_ordered = models.DateTimeField(auto_now_add=True)
#     total_price = models.DecimalField(max_digits=8, decimal_places=2)

# –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏
# Django –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
# ‚óè CharField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# ‚óè EmailField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
# ‚óè TextField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–æ–π –¥–ª–∏–Ω—ã
# ‚óè IntegerField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# ‚óè DecimalField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª
# ‚óè FloatField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª, –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é
# ‚óè BooleanField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (True/False)
# ‚óè DateTimeField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
# ‚óè DateField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
# ‚óè TimeField - –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
# ‚óè ForeignKey - –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é. –û–¥–∏–Ω –∫–æ –º–Ω–æ–≥–∏–º
# ‚óè ManyToManyField - –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ "–º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º"
# ‚óè ImageField - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–Ω–∏–µ–º === pip install pillow
# https://docs.djangoproject.com/en/4.2/ref/models/fields/#model-field-types


# –ú–ò–ì–†–ê–¶–ò–ò
# –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ç–æ –∑–æ–∑–¥–∞–¥—É—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
# python manage.py makemigrations lecapp2

# –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏(–ø–æ—è–≤—è—Ç—Å—è –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã)
# python manage.py migrate


# –°–û–ë–°–¢–í–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´
# –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç management
# –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ —Å–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç commands

# –≤–Ω—É—Ç—Ä–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ my_command.py
# –≤ –Ω–µ–º –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É
# from django.core.management.base import BaseCommand
#
#
# class Command(BaseCommand):
#     help = "Print 'Hello world!' to output."
#
#     def handle(self, *args, **kwargs):
#         self.stdout.write('Hello world!')

# –∑–∞—Ç–µ–º –≤ –∫–æ–Ω—Å–æ–ª–µ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
# python manage.py my_command -h
# python manage.py help

# –¥–ª—è –≤—ã–≤–æ–¥–∞ Hello world!
# python manage.py my_command


# —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è create_user.py
# from django.core.management.base import BaseCommand
# from lecapp2.models import User
#
#
# class Command(BaseCommand):
#     help = "Create user."
#
#     def handle(self, *args, **kwargs):
#         user = User(name='John', email='john@example.com', password='secret', age=25)
#         ...
#         user.save()
#         self.stdout.write(f'{user}')
#
# python manage.py create_user

# –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –≤ –∫–ª–∞—Å—Å User –≤ —Ñ–∞–π–ª–µ models –¥–æ–±–∞–≤–ª—è–µ–º
# def __str__(self):
#     return f'Username: {self.name}, email: {self.email}, age: {self.age}'


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, read. "all()" –∏ "get()" –∏ "filter()"
# —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª get_all_users.py  - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
# from django.core.management.base import BaseCommand
# from lecapp2.models import User
#
#
# class Command(BaseCommand):
#     help = "Get all users."
#
#     def handle(self, *args, **kwargs):
#         users = User.objects.all()
#         self.stdout.write(f'{users}')

# —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª get_user.py - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞
# from django.core.management.base import BaseCommand
# from lecapp2.models import User
#
#
# class Command(BaseCommand):
#     help = "Get user by id."
#
#     def add_arguments(self, parser):
#         parser.add_argument('id', type=int, help='User ID')
#
#     def handle(self, *args, **kwargs):
#         id = kwargs['id']
#         user = User.objects.get(id=id)
#         self.stdout.write(f'{user}')

# python manage.py get_user 2

# –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è None, –∞ –Ω–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pk(–ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á) –∏ filter –≤–º–µ—Å—Ç–æ get
# from django.core.management.base import BaseCommand
# from lecapp2.models import User
#
#
# class Command(BaseCommand):
#     help = "Get user by id."
#
#     def add_arguments(self, parser):
#         parser.add_argument('pk', type=int, help='User ID')
#
#     def handle(self, *args, **kwargs):
#         pk = kwargs['pk']
#         user = User.objects.filter(pk=pk).first()
#         self.stdout.write(f'{user}')

# –º–µ—Ç–æ–¥ filter()
# Model.objects.filter(param__filter=value)
# ‚óè exact - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
# ‚óè iexact - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
# ‚óè contains - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ–¥—Å—Ç—Ä–æ–∫—É
# ‚óè icontains - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ–¥—Å—Ç—Ä–æ–∫—É –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
# ‚óè in - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –∑–Ω–∞—á–µ–Ω–∏–π
# ‚óè gt - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
# ‚óè gte - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
# ‚óè lt - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
# ‚óè lte - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
# ‚óè startswith - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
# ‚óè istartswith - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
# ‚óè endswith - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É
# ‚óè iendswith - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
# ‚óè range - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–π
# ‚óè date - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —è–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–æ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
# ‚óè year - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —è–≤–ª—è–µ—Ç—Å—è –≥–æ–¥–æ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∑–∞–¥–∞–Ω–Ω–æ–º—É –≥–æ–¥—É


# —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª get_user_age.py - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —é–∑–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≥–æ–¥—É
# from django.core.management.base import BaseCommand
# from lecapp2.models import User
#
#
# class Command(BaseCommand):
#     help = "Get user with age greater <age>."
#
#     def add_arguments(self, parser):
#         parser.add_argument('age', type=int, help='User age')
#
#     def handle(self, *args, **kwargs):
#         age = kwargs['age']
#         user = User.objects.filter(age__gt=age)
#         self.stdout.write(f'{user}')


# update_user.py –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏, update. get() –∏–ª–∏ filter() –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å save()
# from django.core.management.base import BaseCommand
# from lecapp2.models import User
#
#
# class Command(BaseCommand):
#     help = "Update user name by id."
#
#     def add_arguments(self, parser):
#         parser.add_argument('pk', type=int, help='User ID')
#         parser.add_argument('name', type=str, help='User name')
#
#     def handle(self, *args, **kwargs):
#         pk = kwargs.get('pk')
#         name = kwargs.get('name')
#         user = User.objects.filter(pk=pk).first()
#         user.name = name
#         user.save()
#         self.stdout.write(f'{user}')
#
# python manage.py update_user 2 Max


# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏, delete
# from django.core.management.base import BaseCommand
# from lecapp2.models import User
#
#
# class Command(BaseCommand):
#     help = "Delete user by id."
#
#     def add_arguments(self, parser):
#         parser.add_argument('pk', type=int, help='User ID')
#
#     def handle(self, *args, **kwargs):
#         pk = kwargs.get('pk')
#         user = User.objects.filter(pk=pk).first()
#         if user is not None:
#             user.delete()
#         self.stdout.write(f'{user}')


# –®–ê–ë–õ–û–ù–´
# —Ñ–∞–π–ª view
# from django.shortcuts import render
# from django.views.generic import TemplateView  # –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
#
#
# def my_view(request):
#     context = {"name": "John"}
#     return render(request, "lecapp3/my_template.html", context)
#
#
# class TemplIf(TemplateView):
#     template_name = "lecapp3/templ_if.html"
#
#     def get_context_data(self, **kwargs):
#         context = super().get_context_data(**kwargs)
#         context['message'] = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
#         context['number'] = 5
#         return context
#
#
# def view_for(request):
#     my_list = ['apple', 'banana', 'orange']
#     my_dict = {
#         '–∫–∞–∂–¥—ã–π': '–∫—Ä–∞—Å–Ω—ã–π',
#         '–æ—Ö–æ—Ç–Ω–∏–∫': '–æ—Ä–∞–Ω–∂–µ–≤—ã–π',
#         '–∂–µ–ª–∞–µ—Ç': '–∂—ë–ª—Ç—ã–π',
#         '–∑–Ω–∞—Ç—å': '–∑–µ–ª—ë–Ω—ã–π',
#         '–≥–¥–µ': '–≥–æ–ª—É–±–æ–π',
#         '—Å–∏–¥–∏—Ç': '—Å–∏–Ω–∏–π',
#         '—Ñ–∞–∑–∞–Ω': '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π',
#     }
#     context = {'my_list': my_list, 'my_dict': my_dict}
#     return render(request, 'lecapp3/templ_for.html', context)


# urls –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# from django.urls import path
# from .views import TemplIf, my_view, view_for
#
#
# urlpatterns = [
#     path('', my_view, name='index'),
#     path('if/', TemplIf.as_view(), name='templ_if'),
#     path('for/', view_for, name='templ_for'),
# ]


# —Ñ–∞–π–ª my_template.html
# <!DOCTYPE html>
# <html lang="ru">
# <head>
#     <meta charset="UTF-8">
#     <title>–ü–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω Django</title>
# </head>
# <body>
#     <h1>Hello, {{ name }}!</h1>
# </body>
# </html>


# —Ñ–∞–π–ª templ_if.html
# <!DOCTYPE html>
# <html lang="ru">
# <head>
#     <meta charset="UTF-8">
#     <title>–®–∞–±–ª–æ–Ω —Å –≤–µ—Ç–≤–ª–µ–Ω–∏–µ–º</title>
# </head>
# <body>
#     {% if message %}
#         <p>–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <br> {{ message }}</p>
#     {% endif %}
#
#     <p>–ö –ø—Ä–æ—á—Ç–µ–Ω–∏—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è {{ number }}
#     {% if number == 1 %}
#     –ø–æ—Å—Ç
#     {% elif number >= 2 and number <= 4 %}
#         –ø–æ—Å—Ç–∞
#     {% else %}
#         –ø–æ—Å—Ç–æ–≤
#     {% endif %}
#     </p>
# </body>
# </html>


# —Ñ–∞–π–ª templ_for.html
# <!DOCTYPE html>
# <html lang="ru">
# <head>
#     <meta charset="UTF-8">
#     <title>–®–∞–±–ª–æ–Ω —Å –≤–µ—Ç–≤–ª–µ–Ω–∏–µ–º</title>
# </head>
# <body>
#     <h2>–≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞</h2>
#     <ul>
#     {% for item in my_list %}
#         <li>{{ item }}</li>
#     {% endfor %}
#     </ul>
#
#     <h2>–ö–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è</h2>
#     <table>
#     {% for key, value in my_dict.items %}
#         <tr><td>{{ key }}</td><td>{{ value }}</td></tr>
#     {% endfor %}
#     </table>
# </body>
# </html>
